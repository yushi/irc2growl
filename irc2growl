#!/usr/bin/env coffee

optparse = require 'optparse'
irc = require 'irc'
growler = require 'growler'
net = require 'net'
Iconv = (require 'iconv-jp').Iconv

class GrowlNotifier
  constructor:(@charset)->
    @growl = new growler.GrowlApplication('irc2growl');
    @growl.setNotifications {
      'IRC Message': {}
    }
    @growl.register()
    @queue = []
    @iconv = new Iconv(@charset, 'UTF-8') if @charset != 'UTF-8'

  notify:(title, body)->
    title = this.toutf8 title
    body = this.toutf8 body
    @queue.push {
      title: title
      body: body
    }

  start:()->
    setInterval ()=>
      data = @queue.pop()
      return if !data
      @growl.sendNotification('IRC Message',
        title: data.title
        text: data.body
      )
    , 10

  toutf8:(str)->
    return str if !@iconv

    utf8_str = str
    try
      converted = (@iconv.convert str)
      utf8_str = converted.toString()
    catch e
      console.log e

    return utf8_str

switches = [
  ['-h', '--help', 'Shows help sections']
  ['-m', '--mode MODE', 'set mode "Client" or "Proxy" (defualt is "Client")']
  ['-s', '--server SERVER', 'server address']
  ['-p', '--port PORT', 'server port']
  ['-n', '--nick NICKNAME', 'nick']
  ['-c', '--charset CHARSET', 'charset for server(default is "UTF-8")']
  ['--pass PASSWORD', 'server password']
]

options =
  server: undefined
  port: 6667
  pass: undefined
  nick: undefined
  mode: "Client"
  charset: 'UTF-8'

error = (reason)->
  console.log parser.toString()
  console.log()
  console.log "error: #{reason}"
  process.exit(-1)

get_parser = ()->
  parser = new optparse.OptionParser switches
  parser.on 'help', ()->
    console.log parser.toString()

  parser.on 'mode', (name, value)->
    error "mode required" if !value
    options.mode = value

  parser.on 'server', (name, value)->
    error "address required" if !value
    options.server = value

  parser.on 'port', (name, value)->
    error "port required" if !value
    options.port = parseInt(value)

  parser.on 'pass', (name, value)->
    error "password required" if !value
    options.pass = value

  parser.on 'nick', (name, value)->
    error "nick required" if !value
    options.nick = value

  parser.on 'charset', (name, value)->
    error "charset required" if !value
    options.charset = value
  
  return parser

parser = get_parser()
parser.parse process.argv

error "nick required" if !options.nick
error "server required" if !options.server

class IRC2Growl
  constructor:(@charset)->
    @g = new GrowlNotifier(@charset)
    @g.start()

class IRC2GrowlClient extends IRC2Growl
  setup:(options)->
    @client = new irc.Client options.server, options.nick ,{
      password: options.pass
      port: options.port
    }

    @client.on 'message', (nick, channel, message)=>
      @g.notify "#{nick}@#{channel}", message

    @client.on 'notice', (nick,channel,message)=>
      @g.notify "#{nick}@#{channel}", message

class IRC2GrowlProxy extends IRC2Growl
  setup:(options)->
    @serv = net.createServer (client)=>
      tmp_buffer = []
      tmp_buffer_listener = (data)->
        tmp_buffer.push data
      client.on 'data', tmp_buffer_listener

      bridge = net.connect options.port, options.server, ()=>
        client.pipe bridge
        bridge.pipe client
        client.removeListener 'data', tmp_buffer_listener
        while tmp_buffer.length
          bridge.write(tmp_buffer.pop())

    @serv.listen 6667
      
mode2class =
  Client: IRC2GrowlClient
  Proxy: IRC2GrowlProxy

irc2growl = new mode2class[options.mode](options.charset)
irc2growl.setup options