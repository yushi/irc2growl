#!/usr/bin/env node
var util = require('util')
  , Growl = require('./lib/growl')
  , TCPBridge = require('./lib/tcp_bridge')
  , ircParser = require('./lib/irc_parser')
  , optimist = require('optimist')
  , argv = optimist
           .usage("Usage: $0 [-h] [-r ADDR:PORT] [-l [ADDR]:PORT] [-c CHARSET]\n")
           .alias('h','help')
           .alias('r','remote')
           .alias('l','listen')
           .alias('c','charset')
           .describe('h', 'Shows help sections')
           .describe('r', 'set remote address and port for connect')
           .describe('l', 'set local address and port for listen')
           .describe('c', 'set charset for irc server')
           .demand(['r', 'l'])
           .default('c', 'UTF-8')
           .argv

function parseHostPort(str){
  if(typeof(str) != 'string'){
    throw new Error('string required')
  }
  if(str.indexOf(':') == -1){
    throw new Error('format error')
  }
  return str.split(':')
}

function parseOptions(){
  var options = { remoteAddr: undefined
                , remotePort: undefined
                , localAddr: "127.0.0.1"
                , localPort: undefined
                , charset: argv.charset
                }
  if(argv.help){
    optimist.showHelp()
    process.exit(-1)
  }

  var remoteHostPort = parseHostPort(argv.remote)
  options.remoteAddr = remoteHostPort[0]
  options.remotePort = remoteHostPort[1]


  var listenHostPort = parseHostPort(argv.listen)
  if(listenHostPort[0] != ''){
    options.localAddr = listenHostPort[0]
  }
  options.localPort = listenHostPort[1]

  return options
}

var options = parseOptions()


var bridge = new TCPBridge(
  options.localAddr,
  options.localPort,
  options.remoteAddr,
  options.remotePort)
bridge.start()

var ircRecvParser = new ircParser.IRCRecvParser()
var ircSendParser = new ircParser.IRCSendParser()

var g = new Growl()
function notify(nick, channel, data){
  g.notify([nick, '@', channel].join(''), data)
}

ircRecvParser.encoding(options.charset)
ircSendParser.encoding(options.charset)
ircRecvParser.on('PRIVMSG', notify)
ircRecvParser.on('NOTICE', notify)
ircSendParser.on('PRIVMSG', notify)
ircSendParser.on('NOTICE', notify)

bridge.on('data_local', function(data){
  ircSendParser.emit('data', data)
})

bridge.on('data_remote', function(data){
  ircRecvParser.emit('data', data)
})